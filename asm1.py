# -*- coding: utf-8 -*-
"""ASM1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GuCO9WA5yOCk_ghjeta9LkNkfXJ6VfxK
"""

# IMPORT LIBRARIES
import numpy as np
import pandas as pd
import os.path as op

# TASK1!!!!!!

# **** ANALYSIS ****

# ANALYSE INVALID TINGS!
tracker = 0  # use to iterate over each line in csv file
num_correct_rows = 0
num_invalid_rows = 0
id_errors = np.array([])  # 1D array: lines of incorrect ID
id_count_errors = np.array([],dtype=object)  # 1D array: id of invalid count lines != 26
students_ans = np.array([],dtype=object)  # 2D array: student key (A,B,C...)
id_count_e = np.array([],dtype=object)  # 1D array: invalid lines id. use to count invalid lines since id_count_errors cant
valid_id = np.array([],dtype=object)  # 1D array: use to make dataframe later
while True:
    filename = input('Enter a class file to grade (i.e. class1 for class1.txt): ')
    tracker = -1
    condition = True
    while condition == True:
        tracker = tracker + 1
        try:
            fault_track = 0 # track of invalid lines: if fault_track then append line to student_ans
            df = pd.read_csv(filepath_or_buffer=filename,
                             header=None,skiprows=tracker,nrows=1,
                             sep=',')
            data = df.values[0][0] # id
            # count error check
            if df.values.size != 26:
                id_count_errors = np.append(id_count_errors,[df.values])
                fault_track = fault_track + 1
                id_count_e = np.append(id_count_e,[data])
            # ID check
            if len(data) != 9:
                if id_errors.size == 0:
                    id_errors = np.array(df.values)
                else:
                    id_errors = np.append(id_errors, df.values, axis=0)
                fault_track = fault_track + 1
            try:
                x = int(data[1:])  # if a string remain after N (A0923428), except is called)
            except:
                if id_errors.size == 0:
                    id_errors = np.array(df.values)
                else:
                    id_errors = np.append(id_errors, df.values, axis=0)
                fault_track = fault_track + 1
            if str(data[0]) != 'N':
                id_errors = np.append(id_errors,df.values,axis=0)
                fault_track = fault_track + 1
            # valid lines, keys only!!!: df.iloc[:,1:]
            if fault_track == 0:
                if students_ans.size == 0:
                    students_ans = np.array(df.iloc[:,1:])
                else:
                    students_ans = np.append(students_ans,df.iloc[:,1:].values,axis=0)
                valid_id = np.append(valid_id,[data])
        except FileNotFoundError:
            print('File cannot be found.')
            condition = False
        # pd.errors.EmptyDataError: when there's no line left in csv file
        except pd.errors.EmptyDataError:
            break
    print('Successfully opened: ',filename,'\n')
    break

# ANALYSE STUDENTS' ANSWER
ans_key = np.array("B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D".split(','))
students_checked_ans = students_ans == ans_key  # return 2D array true false. True: correct, False: Wrong and NAN

correct_score = 4*np.count_nonzero(students_checked_ans==True, axis=1)
track = 0  # use to iterate over students_ans
incorrect_score = np.array([])
for i in students_checked_ans:
    x, = np.where(i == False) # index of False: Wrong and NAN
    ind_incor_ans = students_ans[track][x] # array of ans and NAN
    y = pd.isnull(ind_incor_ans) # return true false. True: NAN
    incorrect_score = np.append(incorrect_score,
                                [ind_incor_ans.size - np.count_nonzero(y == True)])
    track = track + 1
students_score = correct_score - incorrect_score

# **** DISPLAY ANALYSIS *****
print('**** ANALYZING ****')
if id_errors.size == 0 and id_count_errors.size == 0:
    print('\n','No errors found!','\n')
else:
    print('\n')
    if id_errors.size!=0:
        for i in id_errors:
            print('Invalid line of data: N# is invalid')
            for x in i:
                print(str(x)+',',end=' ')
            print('\n')
    if id_count_e.size !=0:
        print('Invalid line of data: does not contain exactly 26 values:')
        print(str(id_count_errors[0])+',',end=' ')
        for i in id_count_errors[1:]:
            if str(i)[0] == 'N':
                print('\n')
                print('Invalid line of data: does not contain exactly 26 values:')
                print(str(i)+',',end=' ')
            else:
                print(str(i)+',',end=' ')
        print('\n')
print('**** REPORT ****','\n')
print('Total valid lines of data:',correct_score.size)
print('Total invalid lines of data:', id_errors.shape[0] + id_count_e.size,'\n')
print('Mean (average) score: ',np.round(np.mean(students_score),2))
print('Highest score: ',np.max(students_score))
print('Lowest score: ',np.min(students_score))
print('Range of scores: ',np.max(students_score)-np.min(students_score))
print('Median score:',np.median(students_score))

data_frame = pd.DataFrame(list(zip(valid_id,students_score)))
name_csvfile = str(filename)[:6]+'_grades.txt'
data_frame.to_csv(op.join('ans',name_csvfile),header=False,index=False)  # op.join joins folder path to file path